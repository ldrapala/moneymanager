package byt.money.moneymanager.gui.workingpanel;

import byt.money.moneymanager.common.WorkingPanelState;
import byt.money.moneymanager.service.LoginService;
import byt.money.moneymanager.service.WorkingPanelService;
import byt.money.moneymanager.validator.ComponentValidator;
import byt.money.moneymanager.validator.TextValidator;
import byt.money.moneymanager.validator.UserInputHandler;
import byt.money.moneymanager.validator.Validator;
import java.util.Arrays;
import java.util.ResourceBundle;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Lukasz
 */
public class RegistrationPanel extends javax.swing.JPanel {

    private static final String EMPTY = "";

    private LoginService loginService;
    private WorkingPanelService workingPanelService;

    /**
     * Creates new form RegistrationPanel
     */
    public RegistrationPanel() {
        initComponents();
        localize();
        createValidators();
    }

    public final void localize() {
        ResourceBundle I18N = ResourceBundle.getBundle("i18n/i18n");
        setBorder(javax.swing.BorderFactory.createTitledBorder(I18N.getString("RegistrationPanelTitle")));
        nameLabel.setText(I18N.getString("RegistrationPanel.nameLabel"));
        passwordLabel.setText(I18N.getString("RegistrationPanel.passwordLabel"));
        repeatPasswordLabel.setText(I18N.getString("RegistrationPanel.repeatPasswordLabel"));
        emailLabel.setText(I18N.getString("RegistrationPanel.emailLabel"));
        backButton.setText(I18N.getString("RegistrationPanel.backButton"));
        acceptButton.setText(I18N.getString("RegistrationPanel.acceptButton"));
        messageLabel.setText(EMPTY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        repeatPasswordLabel = new javax.swing.JLabel();
        repeatPasswordField = new javax.swing.JPasswordField();
        emailLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        messageLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        pusherLabel = new javax.swing.JLabel();
        bottomPusherLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        nameLabel.setText("Name:");
        nameLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        nameLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        nameLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(nameLabel, gridBagConstraints);

        nameField.setMinimumSize(new java.awt.Dimension(202, 30));
        nameField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(nameField, gridBagConstraints);

        passwordLabel.setText("Password:");
        passwordLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        passwordLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        passwordLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(passwordLabel, gridBagConstraints);

        passwordField.setMinimumSize(new java.awt.Dimension(202, 30));
        passwordField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(passwordField, gridBagConstraints);

        repeatPasswordLabel.setText("Repeat password:");
        repeatPasswordLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        repeatPasswordLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        repeatPasswordLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(repeatPasswordLabel, gridBagConstraints);

        repeatPasswordField.setMinimumSize(new java.awt.Dimension(202, 30));
        repeatPasswordField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(repeatPasswordField, gridBagConstraints);

        emailLabel.setText("Email:");
        emailLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        emailLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        emailLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(emailLabel, gridBagConstraints);

        emailField.setMinimumSize(new java.awt.Dimension(202, 30));
        emailField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(emailField, gridBagConstraints);

        messageLabel.setMaximumSize(new java.awt.Dimension(120, 24));
        messageLabel.setMinimumSize(new java.awt.Dimension(120, 24));
        messageLabel.setPreferredSize(new java.awt.Dimension(120, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(messageLabel, gridBagConstraints);

        acceptButton.setText("Accept");
        acceptButton.setMaximumSize(new java.awt.Dimension(100, 30));
        acceptButton.setMinimumSize(new java.awt.Dimension(100, 30));
        acceptButton.setPreferredSize(new java.awt.Dimension(100, 30));
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(acceptButton, gridBagConstraints);

        backButton.setText("Back");
        backButton.setMaximumSize(new java.awt.Dimension(100, 30));
        backButton.setMinimumSize(new java.awt.Dimension(100, 30));
        backButton.setPreferredSize(new java.awt.Dimension(100, 30));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(backButton, gridBagConstraints);

        pusherLabel.setMaximumSize(new java.awt.Dimension(173, 30));
        pusherLabel.setMinimumSize(new java.awt.Dimension(173, 30));
        pusherLabel.setPreferredSize(new java.awt.Dimension(173, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(pusherLabel, gridBagConstraints);

        bottomPusherLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        bottomPusherLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        bottomPusherLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(bottomPusherLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        String user = nameField.getText();
        char[] password = passwordField.getPassword();
        char[] passwordRepeated = repeatPasswordField.getPassword();
        String email = emailField.getText();
        if (Arrays.equals(password, passwordRepeated)) {
            if (loginService.isUserNameUnique(user)) {
                messageLabel.setText(EMPTY);
                loginService.register(user, password, email);
                workingPanelService.showWorkingPanel(WorkingPanelState.LOGIN_MMI);
            } else {
                ResourceBundle I18N = ResourceBundle.getBundle("i18n/i18n");
                messageLabel.setText("<html><font color='red'>" + I18N.getString("RegistrationPanel.messageUser")+ "</font></html>");
            }
        } else {
            ResourceBundle I18N = ResourceBundle.getBundle("i18n/i18n");
            messageLabel.setText("<html><font color='red'>" + I18N.getString("RegistrationPanel.messagePassword") + "</font></html>");
        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        workingPanelService.showWorkingPanel(WorkingPanelState.LOGIN_MMI);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel bottomPusherLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel pusherLabel;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        nameField.setText(EMPTY);
        passwordField.setText(EMPTY);
        repeatPasswordField.setText(EMPTY);
        emailField.setText(EMPTY);
        messageLabel.setText(EMPTY);
    }

    private void createValidators() {
        Validator loginValidator = new TextValidator();
        Validator passwordValidator = new TextValidator();
        Validator repeatPasswordValidator = new TextValidator();
        ComponentValidator componentValidator = new ComponentValidator(acceptButton, loginValidator, passwordValidator, repeatPasswordValidator);
        DocumentListener loginFieldListener = new UserInputHandler(loginValidator, nameField, componentValidator);
        DocumentListener passwordFieldListener = new UserInputHandler(passwordValidator, passwordField, componentValidator);
        DocumentListener repeatedPasswordFieldListener = new UserInputHandler(repeatPasswordValidator, repeatPasswordField, componentValidator);
        passwordField.getDocument().addDocumentListener(passwordFieldListener);
        nameField.getDocument().addDocumentListener(loginFieldListener);
        repeatPasswordField.getDocument().addDocumentListener(repeatedPasswordFieldListener);
        getUpValidators(passwordFieldListener, loginFieldListener, repeatedPasswordFieldListener);
    }

    private void getUpValidators(DocumentListener... listeners) {
        for (DocumentListener listener : listeners) {
            listener.insertUpdate(null);
        }
    }

    public void setLoginService(LoginService loginService) {
        this.loginService = loginService;
    }

    public void setWorkingPanelService(WorkingPanelService workingPanelService) {
        this.workingPanelService = workingPanelService;
    }

}
