package byt.money.moneymanager.gui.workingpanel;

import byt.money.moneymanager.common.WorkingPanelState;
import byt.money.moneymanager.service.LocalizerService;
import byt.money.moneymanager.service.LoginService;
import byt.money.moneymanager.service.WorkingPanelService;
import byt.money.moneymanager.validator.ComponentValidator;
import byt.money.moneymanager.validator.TextValidator;
import byt.money.moneymanager.validator.UserInputHandler;
import byt.money.moneymanager.validator.Validator;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Lukasz
 */
public class LoginPanel extends javax.swing.JPanel {

    private static final String EMPTY = "";

    private WorkingPanelService workingPanelService;
    private LoginService loginService;
    private LocalizerService localizerService;

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel() {
        initComponents();
        prepareLanguageField();
        createValidators();
        createListeners();
        localize();
    }

    public final void localize() {
        ResourceBundle I18N = ResourceBundle.getBundle("i18n/i18n");
        setBorder(javax.swing.BorderFactory.createTitledBorder(I18N.getString("LoginPanelTitle")));
        registerButton.setText(I18N.getString("LoginPanel.registerButton"));
        acceptButton.setText(I18N.getString("LoginPanel.acceptButton"));
        nameLabel.setText(I18N.getString("LoginPanel.nameField"));
        passwordLabel.setText(I18N.getString("LoginPanel.passwordField"));
        languageLabel.setText(I18N.getString("LoginPanel.languageLabel"));
        messageLabel.setText(EMPTY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        registerButton = new javax.swing.JButton();
        languageLabel = new javax.swing.JLabel();
        languageField = new javax.swing.JComboBox<>();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        messageLabel = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        registerButton.setText("Register");
        registerButton.setMaximumSize(new java.awt.Dimension(100, 30));
        registerButton.setMinimumSize(new java.awt.Dimension(100, 30));
        registerButton.setPreferredSize(new java.awt.Dimension(100, 30));
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(registerButton, gridBagConstraints);

        languageLabel.setText("Language:");
        languageLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        languageLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        languageLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(languageLabel, gridBagConstraints);

        languageField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        languageField.setMinimumSize(new java.awt.Dimension(50, 30));
        languageField.setPreferredSize(new java.awt.Dimension(50, 30));
        languageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(languageField, gridBagConstraints);

        nameLabel.setText("Name:");
        nameLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        nameLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        nameLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(nameLabel, gridBagConstraints);

        nameField.setMinimumSize(new java.awt.Dimension(202, 30));
        nameField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(nameField, gridBagConstraints);

        passwordLabel.setText("Password:");
        passwordLabel.setMaximumSize(new java.awt.Dimension(120, 30));
        passwordLabel.setMinimumSize(new java.awt.Dimension(120, 30));
        passwordLabel.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(passwordLabel, gridBagConstraints);

        passwordField.setMinimumSize(new java.awt.Dimension(202, 30));
        passwordField.setPreferredSize(new java.awt.Dimension(202, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(passwordField, gridBagConstraints);

        messageLabel.setMaximumSize(new java.awt.Dimension(120, 24));
        messageLabel.setMinimumSize(new java.awt.Dimension(120, 24));
        messageLabel.setPreferredSize(new java.awt.Dimension(120, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(messageLabel, gridBagConstraints);

        acceptButton.setText("Accept");
        acceptButton.setMaximumSize(new java.awt.Dimension(100, 30));
        acceptButton.setMinimumSize(new java.awt.Dimension(100, 30));
        acceptButton.setPreferredSize(new java.awt.Dimension(100, 30));
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(acceptButton, gridBagConstraints);

        jLabel1.setMaximumSize(new java.awt.Dimension(120, 30));
        jLabel1.setMinimumSize(new java.awt.Dimension(120, 30));
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        workingPanelService.showWorkingPanel(WorkingPanelState.REGISTRATION);
    }//GEN-LAST:event_registerButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        String user = nameField.getText();
        char password[] = passwordField.getPassword();
        boolean success = loginService.tryLogin(user, password);
        if (success) {
            messageLabel.setText(EMPTY);
            workingPanelService.showWorkingPanel(WorkingPanelState.WELCOME);
        } else {
            ResourceBundle I18N = ResourceBundle.getBundle("i18n/i18n");
            messageLabel.setText("<html><font color='red'>" + I18N.getString("LoginPanel.messageError") + "</font></html>");
        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void languageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageFieldActionPerformed
        String language = (String) languageField.getSelectedItem();
        localizerService.localize(language);
    }//GEN-LAST:event_languageFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> languageField;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton registerButton;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        languageField.setSelectedIndex(0);
        nameField.setText(EMPTY);
        passwordField.setText(EMPTY);
        messageLabel.setText(EMPTY);
    }

    private void createValidators() {
        Validator loginValidator = new TextValidator();
        Validator passwordValidator = new TextValidator();
        ComponentValidator componentValidator = new ComponentValidator(acceptButton, loginValidator, passwordValidator);
        DocumentListener loginFieldListener = new UserInputHandler(loginValidator, nameField, componentValidator);
        DocumentListener passwordFieldListener = new UserInputHandler(passwordValidator, passwordField, componentValidator);
        passwordField.getDocument().addDocumentListener(passwordFieldListener);
        nameField.getDocument().addDocumentListener(loginFieldListener);
        getUpValidators(passwordFieldListener, loginFieldListener);
    }

    private void createListeners() {
        KeyAdapter keyAdapter = new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    acceptButtonActionPerformed(null);
                }
            }

        };
        nameField.addKeyListener(keyAdapter);
        passwordField.addKeyListener(keyAdapter);
    }

    private void getUpValidators(DocumentListener passwordFieldListener, DocumentListener loginFieldListener) {
        passwordFieldListener.insertUpdate(null);
        loginFieldListener.insertUpdate(null);
    }

    private void prepareLanguageField() {
        languageField.setModel(new DefaultComboBoxModel(new String[]{"PL", "EN"}));
    }

    public void setWorkingPanelService(WorkingPanelService workingPanelService) {
        this.workingPanelService = workingPanelService;
    }

    public void setLoginService(LoginService loginService) {
        this.loginService = loginService;
    }

    public void setLocalizerService(LocalizerService localizerService) {
        this.localizerService = localizerService;
    }

}
